//import Header from '../components/Header'
import React, { Component } from 'react'
import Link from 'next/link'
//import Router from 'next/router'
import { withRouter } from 'next/router'

class AboutPage extends React.Component {
  ///*
  // costructor(props) - props will be router object if HOC withRouter() will be used.
  constructor(props) {
    super(props);
    // `super` must be used before using `this`.
    //this.id =  '123a' // constructor properties is not possible to change later for all descendants.
    console.log('AboutPage constructor props:')
    console.log(props)
    // Does not work!!!!
    props.router.beforePopState(({ url, as, options }) => {
      console.log('Router.beforePopState as:'); console.log(as)
      console.log('Router.beforePopState url:'); console.log(url)
      console.log('Router.beforePopState options:'); console.log(options)
      // I only want to allow these two routes!
      //as !== '/' || as !== '/readmore'
      if (as !== '/readmore') {
      // Have SSR render bad routes as a 404.
      window.location.href = as
      return false
      }
      return true
    })
    //const r = this.props.router // create failure in constructor.
    //console.log(r)
  }

  render () {
    //const router = this.props.router
    const {router} = this.props
    console.log('AboutPage render router:')
    console.log(router)
    return (
      <div>
        <Link href='/'>
          <a>Home</a>
        </Link>
        <p>This is the about page.</p>
      </div>
    )
  }
}

//export default AboutPage // Without higher-Order Component (HOC)  withRouter(...)  router object will be undefined.
// NB! Higher-Order Component (HOC) withRouter(...) must be to used to get router object and it's properties:
// pathname, query or asPath etc. Otherwise router object will be undefined.
export default withRouter(AboutPage)

/*
Router.beforePopState(({ url, as, options }) => {
  console.log('Router.beforePopState as:'); console.log(as)
  console.log('Router.beforePopState url:'); console.log(url)
  console.log('Router.beforePopState options:'); console.log(options)
  // I only want to allow these two routes!
  //as !== '/' || as !== '/readmore'
  if (as !== '/') {
  // Have SSR render bad routes as a 404.
  window.location.href = as
  return false
  }
  return true
})
*/


/*
Above Router object comes with the following API:

route - String of the current route
pathname - String of the current path excluding the query string
query - Object with the parsed query string. Defaults to {}
asPath - String of the actual path (including the query) shows in the browser
push(url, as=url) - performs a pushState call with the given url
replace(url, as=url) - performs a replaceState call with the given url
beforePopState(cb=function) - intercept popstate before router processes the event.
The second as parameter for push and replace is an optional decoration of the URL.
 Useful if you configured custom routes on the server.
 */

/*
//<Header />
export default () => (
  <div>
    <Link href='/'>
      <a>Home</a>
    </Link>
    <p>This is the about page.</p>
  </div>
)
*/
